module Evergreen.Migrate.V4 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Evergreen.V3.Duration
import Evergreen.V3.Record
import Evergreen.V3.Types
import Evergreen.V4.Duration
import Evergreen.V4.Record
import Evergreen.V4.Types
import Lamdera.Migrations exposing (..)


frontendModel : Evergreen.V3.Types.FrontendModel -> ModelMigration Evergreen.V4.Types.FrontendModel Evergreen.V4.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V3.Types.BackendModel -> ModelMigration Evergreen.V4.Types.BackendModel Evergreen.V4.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V3.Types.FrontendMsg -> MsgMigration Evergreen.V4.Types.FrontendMsg Evergreen.V4.Types.FrontendMsg
frontendMsg old =
    case old of
        Evergreen.V3.Types.UrlClicked p0 ->
            MsgMigrated ( Evergreen.V4.Types.UrlClicked p0, Cmd.none )

        Evergreen.V3.Types.UrlChanged p0 ->
            MsgMigrated ( Evergreen.V4.Types.UrlChanged p0, Cmd.none )

        Evergreen.V3.Types.NoOpFrontendMsg ->
            MsgOldValueIgnored

        Evergreen.V3.Types.DidCheckPlayer p0 p1 ->
            MsgMigrated ( Evergreen.V4.Types.DidCheckPlayer p0 p1, Cmd.none )

        Evergreen.V3.Types.DidInputTime p0 ->
            MsgMigrated ( Evergreen.V4.Types.DidInputTime p0, Cmd.none )

        Evergreen.V3.Types.ClickedAddRecord ->
            MsgMigrated ( Evergreen.V4.Types.ClickedAddRecord, Cmd.none )

        Evergreen.V3.Types.GotNow p0 p1 ->
            MsgMigrated ( Evergreen.V4.Types.GotNow (p0 |> migrate_Duration_Duration) p1, Cmd.none )

        Evergreen.V3.Types.ClickedDelete p0 ->
            MsgMigrated ( Evergreen.V4.Types.ClickedDelete p0, Cmd.none )

        Evergreen.V3.Types.DidFocus p0 ->
            MsgMigrated ( Evergreen.V4.Types.DidFocus p0, Cmd.none )


toBackend : Evergreen.V3.Types.ToBackend -> MsgMigration Evergreen.V4.Types.ToBackend Evergreen.V4.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V3.Types.BackendMsg -> MsgMigration Evergreen.V4.Types.BackendMsg Evergreen.V4.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V3.Types.ToFrontend -> MsgMigration Evergreen.V4.Types.ToFrontend Evergreen.V4.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_FrontendModel : Evergreen.V3.Types.FrontendModel -> Evergreen.V4.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , players = old.players
    , selectedPlayers = old.selectedPlayers
    , timeString = old.timeString
    , records = old.records |> migrate_Types_Records
    , results = Evergreen.V4.Types.List
    }


migrate_Duration_Duration : Evergreen.V3.Duration.Duration -> Evergreen.V4.Duration.Duration
migrate_Duration_Duration old =
    case old of
        Evergreen.V3.Duration.Duration p0 ->
            Evergreen.V4.Duration.Duration p0


migrate_Record_Record : Evergreen.V3.Record.Record -> Evergreen.V4.Record.Record
migrate_Record_Record old =
    { id = old.id
    , duration = old.duration |> migrate_Duration_Duration
    , date = old.date
    , players = old.players
    }


migrate_Types_Records : Evergreen.V3.Types.Records -> Evergreen.V4.Types.Records
migrate_Types_Records old =
    case old of
        Evergreen.V3.Types.Loading ->
            Evergreen.V4.Types.Loading

        Evergreen.V3.Types.Loaded p0 ->
            Evergreen.V4.Types.Loaded (p0 |> List.map migrate_Record_Record)
